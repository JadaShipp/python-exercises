# Exercise 1 - rewrite the above example code using list comprehension syntax. Make a variable named uppercased_fruits to hold the output of the list comprehension. Output should be ['MANGO', 'KIWI', etc...]

fruits = ['mango', 'kiwi', 'strawberry', 'guava', 'pineapple', 'mandarin orange']   

[fruit.upper() for fruit in fruits]                                                                                                              
['MANGO', 'KIWI', 'STRAWBERRY', 'GUAVA', 'PINEAPPLE', 'MANDARIN ORANGE']

upper_cased_fruits = [fruit.upper() for fruit in fruits]                                                                                         

upper_cased_fruits                                                                                                                               
['MANGO', 'KIWI', 'STRAWBERRY', 'GUAVA', 'PINEAPPLE', 'MANDARIN ORANGE']

# Exercise 2 - create a variable named capitalized_fruits and use list comprehension syntax to produce output like ['Mango', 'Kiwi', 'Strawberry', etc...]
capitalized_fruits = [fruit.capitalize() for fruit in fruits] 

# Exercise 5 make a list that contains each fruit with more than 5 characters
[fruit for fruit in fruits if len(fruits) > 5]                                                                                                                                             
['mango', 'kiwi', 'strawberry', 'guava', 'pineapple', 'mandarin orange']

# Exercise 6 make a list that contains each fruit with exactly 5 characters
[fruit for fruit in fruits if len(fruit) == 5]                                                                                                                                             
['mango', 'guava']

# Exercise 7 - Make a list that contains fruits that have less than 5 characters
fruit for fruit in fruits if len(fruit) < 5]                                                                                                                                              
['kiwi']

# Exercise 8 Make a list containing the number of characters in each fruit. Output would be [5, 4, 10, etc... ]
[len(fruit) for fruit in fruits]                                                                                                                                                           
[5, 4, 10, 5, 9, 15]

# Exercise 9 - Make a variable named fruits_with_letter_a that contains a list of only the fruits that contain the letter "a"
 fruits_with_letter_a = [fruit for fruit in fruits if vowel in fruit]  
 ['mango', 'strawberry', 'guava', 'pineapple', 'mandarin orange']

# Exercise 10 - Make a variable named even_numbers that holds only the even numbers
numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 17, 19, 23, 256, -8, -4, -2, 5, -9]
even_numbers = [n for n in numbers if n % 2 == 0]     

# Exercise 11 - Make a variable named odd_numbers that holds only the odd numbers
odd_numbers = [n for n in numbers if n % 2 != 0]   

# Exercise 12 - Make a variable named positive_numbers that holds only the positive numbers
positive_numbers = [n for n in numbers if n > 0]    

# Exercise 13 - Make a variable named negative_numbers that holds only the negative numbers
negative_numbers = [n for n in numbers if n < 0]    

# Exercise 14 - use a list comprehension w/ a conditional in order to produce a list of numbers with 2 or more numerals
[n for n in numbers if n > 9]

# Exercise 15 - Make a variable named numbers_squared that contains the numbers list with each element squared
numbers_squared = [n ** 2 for n in numbers]  

# Exercise 16 - Make a variable named odd_negative_numbers that contains only the numbers that are both odd and negative.
odd_negative_numbers = [n for n in numbers if n % 2 != 0 and n < 0]     

# Exercise 17 - Make a variable named numbers_plus_5. In it, return a list containing each number plus five. 
numbers_plus_5 = [n + 5 for n in numbers]  

# BONUS Make a variable named "primes" that is a list containing the prime numbers in the numbers list. *Hint* you may want to make or find a helper function that determines if a given number is prime or not.